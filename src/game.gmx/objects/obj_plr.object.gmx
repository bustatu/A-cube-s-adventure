<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_plr</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create
image_speed=0
image_xscale=2
image_yscale=2

///Ultimate
ultimate_selected=0
time_stop_timemax=0.7
time_stop_range_growth=2000

if(file_exists("custom_skin.png")){
    sprite_replace(spr_plr,"custom_skin.png",1,false,false,16,16)
}

///Time-dif
hurt=0

///Target
target_x=x
target_y=y
target_l_width=2
target_angle=0
move_speed=400
move_speedi=400
moving=false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Step
if(!obj_gamemanager.sys_paused&amp;&amp;(room==r_menu||instance_exists(obj_pausebutton)&amp;&amp;!obj_pausebutton.game_paused)){
    if(abs(target_x-x)&lt;=
    lengthdir_x(move_speed*delta_time/1000000,point_direction(x,y,target_x,target_y)))
    {x=target_x}
    if(abs(target_y-y)&lt;=
    lengthdir_y(move_speed*delta_time/1000000,point_direction(x,y,target_x,target_y)))
    {y=target_y}
    if(target_x!=x||target_y!=y){
     move_towards_point(target_x,target_y,move_speed*delta_time/1000000)
     moving=true
    }
    else {speed=0;moving=false}
    if(obj_cursor.l&amp;&amp;(!obj_gamemanager.sys_paused&amp;&amp;!place_meeting(obj_cursor.x,obj_cursor.y,obj_wall)&amp;&amp;!collision_line(x,y,obj_cursor.x,obj_cursor.y,obj_wall,false,true))){
        target_x=obj_cursor.x
        target_y=obj_cursor.y
    }
    if(obj_cursor.rpressed&amp;&amp;!obj_ultimatecontroller.oncooldown&amp;&amp;room!=r_menu){
        if(obj_ultimatecontroller.utimer==-1){
            obj_ultimatecontroller.uactive=!obj_ultimatecontroller.uactive
            with(obj_timestop){instance_destroy()}
            inst=instance_create(0,0,obj_timestop)
            inst.timemax=time_stop_timemax
            inst.range_growth=time_stop_range_growth
            if(obj_ultimatecontroller.uactive==false){
                obj_ultimatecontroller.ucooldown=obj_ultimatecontroller.ucooldowni
                obj_ultimatecontroller.oncooldown=true
            }
        }
        else {
            obj_ultimatecontroller.uactive=true
        }
    }
    ultimate_selected=obj_gamemanager.ultimate_selected
    
    if(room!=r_menu){
        if(obj_ultimatecontroller.uselected==1&amp;&amp;obj_ultimatecontroller.uactive){
            move_speed=move_speedi*2
            if(!instance_exists(obj_trail)){
                inst=instance_create(x,y,obj_trail)
                inst.trail_color=make_color_rgb(obj_gamemanager.skin_r,obj_gamemanager.skin_g,obj_gamemanager.skin_b)
                inst.trail_sprite=spr_trail
                inst.trail_sprite_xscale=image_xscale
                inst.trail_sprite_yscale=image_yscale
                inst.trail_limit=30
            }
            else {
                if(obj_trail.x==x&amp;&amp;obj_trail.y==y&amp;&amp;obj_trail.update_rate&lt;=0){
                    with(obj_trail){
                        ds_list_delete(trail_x,0)
                        ds_list_delete(trail_y,0)
                    }
                }
                obj_trail.x=x
                obj_trail.y=y
            }
        }
        else {
            if(instance_exists(obj_trail)){
                with(obj_trail){to_be_destroyed=true}
            }
            move_speed=move_speedi
        }
    }
}
else {speed=0}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw
if(!obj_gamemanager.sys_paused&amp;&amp;(room==r_menu||instance_exists(obj_pausebutton)&amp;&amp;!obj_pausebutton.game_paused)){
    if(target_x!=x||target_y!=y){
        draw_sprite_ext(spr_target,0,target_x,target_y,image_xscale,image_yscale,target_angle,c_white,1)
        if(obj_gamemanager.debug){
            draw_set_color(c_red)
            draw_line_width(x,y,target_x,target_y,target_l_width)        
        }
    }
    if(hurt&lt;=0){draw_self();hurt=0;}
    else {
        shader_set(sh_invert_color)
        draw_self()
        shader_reset()
        hurt-=delta_time/1000000
    }
    if((room==r_endless||room==r_prush)&amp;&amp;obj_ultimatecontroller.uselected!=-1&amp;&amp;ultimate_selected!=-1){
        draw_set_color(c_gray)
        draw_rect_w(room_width/2-32,1010,room_width/2+32,1074,3)
        draw_sprite_ext(spr_ultimates,obj_ultimatecontroller.uselected,room_width/2,1042,2,2,0,c_white,1)
        if(obj_ultimatecontroller.uactive){
            if(obj_ultimatecontroller.utimeri==-1){
                draw_set_alpha(0.5)
                draw_set_color(c_yellow)
                draw_rectangle(room_width/2-16*2,1042-16*2,room_width/2+16*2,1042+16*2,false)
                draw_set_alpha(1)
            }
            else {
                draw_set_color(make_color_rgb(255*obj_ultimatecontroller.utimer/obj_ultimatecontroller.utimeri,255*(1-obj_ultimatecontroller.utimer/obj_ultimatecontroller.utimeri),0))
                draw_rectangle(room_width/2-16*2,1042-16*2+64*obj_ultimatecontroller.utimer/obj_ultimatecontroller.utimeri,room_width/2+16*2,1042+16*2,false)
            }
        }
        else {
            draw_set_color(make_color_rgb(255*obj_ultimatecontroller.ucooldown/obj_ultimatecontroller.ucooldowni,255*(1-obj_ultimatecontroller.ucooldown/obj_ultimatecontroller.ucooldowni),0))
            draw_rectangle(room_width/2-16*2,1042-16*2+64*obj_ultimatecontroller.ucooldown/obj_ultimatecontroller.ucooldowni,room_width/2+16*2,1042+16*2,false)
        }
    }
    target_angle+=50*delta_time/1000000
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
